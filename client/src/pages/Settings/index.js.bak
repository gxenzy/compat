var __assign = Object.assign || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create(Object.prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _ = t[1]; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var material_1 = require("@mui/material");
var icons_material_1 = require("@mui/icons-material");
var AuthContext_1 = require("../../contexts/AuthContext");
var store_1 = require("../../store");
var authSlice_1 = require("../../store/slices/authSlice");
var Settings = function () {
    var _a, _b, _c;
    var { currentUser } = (0, AuthContext_1.useAuthContext)();
    var dispatch = (0, store_1.useAppDispatch)();
    var _d = (0, React.useState)(false), saveSuccess = _d[0], setSaveSuccess = _d[1];
    var _e = (0, React.useState)(false), deleteDialog = _e[0], setDeleteDialog = _e[1];
    var _f = (0, React.useState)({
        emailNotifications: ((_a = currentUser === null || currentUser === void 0 ? void 0 : currentUser.settings) === null || _a === void 0 ? void 0 : _a.emailNotifications) || false,
        darkMode: ((_b = currentUser === null || currentUser === void 0 ? void 0 : currentUser.settings) === null || _b === void 0 ? void 0 : _b.darkMode) || false,
        language: ((_c = currentUser === null || currentUser === void 0 ? void 0 : currentUser.settings) === null || _c === void 0 ? void 0 : _c.language) || 'en',
        visibility: 'public',
        twoFactorAuth: false,
    }), settings = _f[0], setSettings = _f[1];
    var handleSettingChange = function (setting, value) {
        setSettings(function (prev) {
            var _a;
            return (__assign(__assign({}, prev), (_a = {}, _a[setting] = value, _a)));
        });
    };
    var handleSaveSettings = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            try {
                dispatch((0, authSlice_1.updateUser)(__assign(__assign({}, currentUser), { settings: __assign(__assign({}, currentUser.settings), settings) })));
                setSaveSuccess(true);
                setTimeout(function () { return setSaveSuccess(false); }, 3000);
            }
            catch (error) {
                console.error('Error saving settings:', error);
            }
            return [2 /*return*/];
        });
    }); };
    var languages = [
        { code: 'en', name: 'English' },
        { code: 'es', name: 'Spanish' },
        { code: 'fr', name: 'French' },
        { code: 'de', name: 'German' },
    ];
    return (<material_1.Box sx={{ p: 3 }}>
      <material_1.Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
        <material_1.Typography variant="h4">Settings</material_1.Typography>
        <material_1.Button variant="contained" startIcon={<icons_material_1.Save />} onClick={handleSaveSettings}>
          Save Changes
        </material_1.Button>
      </material_1.Box>

      {saveSuccess && (<material_1.Alert severity="success" sx={{ mb: 3 }}>
          Settings saved successfully!
        </material_1.Alert>)}

      <material_1.Grid container spacing={3}>
        {/* Notification Settings */}
        <material_1.Grid item xs={12} md={6}>
          <material_1.Card>
            <material_1.CardHeader title="Notifications"/>
            <material_1.Divider />
            <material_1.CardContent>
              <material_1.List>
                <material_1.ListItem>
                  <material_1.ListItemIcon>
                    <icons_material_1.Notifications />
                  </material_1.ListItemIcon>
                  <material_1.ListItemText primary="Email Notifications" secondary="Receive email notifications for important updates"/>
                  <material_1.ListItemSecondaryAction>
                    <material_1.Switch edge="end" checked={settings.emailNotifications} onChange={function (e) { return handleSettingChange('emailNotifications', e.target.checked); }}/>
                  </material_1.ListItemSecondaryAction>
                </material_1.ListItem>
              </material_1.List>
            </material_1.CardContent>
          </material_1.Card>

          {/* Appearance Settings */}
          <material_1.Card sx={{ mt: 3 }}>
            <material_1.CardHeader title="Appearance"/>
            <material_1.Divider />
            <material_1.CardContent>
              <material_1.List>
                <material_1.ListItem>
                  <material_1.ListItemIcon>
                    <icons_material_1.DarkMode />
                  </material_1.ListItemIcon>
                  <material_1.ListItemText primary="Dark Mode" secondary="Use dark theme across the application"/>
                  <material_1.ListItemSecondaryAction>
                    <material_1.Switch edge="end" checked={settings.darkMode} onChange={function (e) { return handleSettingChange('darkMode', e.target.checked); }}/>
                  </material_1.ListItemSecondaryAction>
                </material_1.ListItem>
                <material_1.ListItem>
                  <material_1.ListItemIcon>
                    <icons_material_1.Language />
                  </material_1.ListItemIcon>
                  <material_1.ListItemText primary="Language" secondary="Select your preferred language"/>
                  <material_1.ListItemSecondaryAction>
                    <material_1.Select value={settings.language} onChange={function (e) { return handleSettingChange('language', e.target.value); }} size="small" sx={{ minWidth: 120 }}>
                      {languages.map(function (lang) { return (<material_1.MenuItem key={lang.code} value={lang.code}>
                          {lang.name}
                        </material_1.MenuItem>); })}
                    </material_1.Select>
                  </material_1.ListItemSecondaryAction>
                </material_1.ListItem>
              </material_1.List>
            </material_1.CardContent>
          </material_1.Card>
        </material_1.Grid>

        {/* Privacy & Security Settings */}
        <material_1.Grid item xs={12} md={6}>
          <material_1.Card>
            <material_1.CardHeader title="Privacy"/>
            <material_1.Divider />
            <material_1.CardContent>
              <material_1.List>
                <material_1.ListItem>
                  <material_1.ListItemIcon>
                    <icons_material_1.Visibility />
                  </material_1.ListItemIcon>
                  <material_1.ListItemText primary="Profile Visibility" secondary="Control who can see your profile"/>
                  <material_1.ListItemSecondaryAction>
                    <material_1.Select value={settings.visibility} onChange={function (e) { return handleSettingChange('visibility', e.target.value); }} size="small" sx={{ minWidth: 120 }}>
                      <material_1.MenuItem value="public">Public</material_1.MenuItem>
                      <material_1.MenuItem value="private">Private</material_1.MenuItem>
                      <material_1.MenuItem value="team">Team Only</material_1.MenuItem>
                    </material_1.Select>
                  </material_1.ListItemSecondaryAction>
                </material_1.ListItem>
              </material_1.List>
            </material_1.CardContent>
          </material_1.Card>

          <material_1.Card sx={{ mt: 3 }}>
            <material_1.CardHeader title="Security"/>
            <material_1.Divider />
            <material_1.CardContent>
              <material_1.List>
                <material_1.ListItem>
                  <material_1.ListItemIcon>
                    <icons_material_1.Lock />
                  </material_1.ListItemIcon>
                  <material_1.ListItemText primary="Two-Factor Authentication" secondary="Add an extra layer of security"/>
                  <material_1.ListItemSecondaryAction>
                    <material_1.Switch edge="end" checked={settings.twoFactorAuth} onChange={function (e) { return handleSettingChange('twoFactorAuth', e.target.checked); }}/>
                  </material_1.ListItemSecondaryAction>
                </material_1.ListItem>
              </material_1.List>
            </material_1.CardContent>
          </material_1.Card>

          {/* Danger Zone */}
          <material_1.Card sx={{ mt: 3, bgcolor: 'error.main' }}>
            <material_1.CardHeader title={<material_1.Typography color="white">Danger Zone</material_1.Typography>}/>
            <material_1.Divider />
            <material_1.CardContent>
              <material_1.Button variant="contained" color="error" startIcon={<icons_material_1.Delete />} onClick={function () { return setDeleteDialog(true); }} sx={{ backgroundColor: 'white', '&:hover': { backgroundColor: 'grey.100' } }}>
                Delete Account
              </material_1.Button>
            </material_1.CardContent>
          </material_1.Card>
        </material_1.Grid>
      </material_1.Grid>

      {/* Delete Account Dialog */}
      <material_1.Dialog open={deleteDialog} onClose={function () { return setDeleteDialog(false); }}>
        <material_1.DialogTitle>Delete Account</material_1.DialogTitle>
        <material_1.DialogContent>
          <material_1.DialogContentText>
            Are you sure you want to delete your account? This action cannot be undone
            and all your data will be permanently deleted.
          </material_1.DialogContentText>
        </material_1.DialogContent>
        <material_1.DialogActions>
          <material_1.Button onClick={function () { return setDeleteDialog(false); }}>Cancel</material_1.Button>
          <material_1.Button color="error" onClick={function () { return setDeleteDialog(false); }}>
            Delete Account
          </material_1.Button>
        </material_1.DialogActions>
      </material_1.Dialog>
    </material_1.Box>);
};
export default Settings;
